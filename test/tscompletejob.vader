Before:
  let current_buf = bufnr("%")
  call tscompletejob#init_plugin(1)
  call tscompletejob#restart()

  let sample1 = tscompletejob#utils#join_path(
                    \ tscompletejob#get_plugin_dir(),
                    \ tscompletejob#utils#join_path("test", "sample1.ts"))
  let errors_ts = tscompletejob#utils#join_path(
                    \ tscompletejob#get_plugin_dir(),
                    \ tscompletejob#utils#join_path("test", "errors.ts"))
  let rename_ts = tscompletejob#utils#join_path(
                    \ tscompletejob#get_plugin_dir(),
                    \ tscompletejob#utils#join_path("test", "rename.ts"))
  let format_ts = tscompletejob#utils#join_path(
                    \ tscompletejob#get_plugin_dir(),
                    \ tscompletejob#utils#join_path("test", "format.ts"))
  let codefix_ts = tscompletejob#utils#join_path(
                    \ tscompletejob#get_plugin_dir(),
                    \ tscompletejob#utils#join_path("test", "codefix.ts"))

After:
  exec "buffer " . current_buf

Execute (tss_command returns default):
  let cmds = tscompletejob#tss_command()
  AssertEqual 2, len(cmds)
  AssertEqual "node", cmds[0]
  Assert stridx(cmds[1], "tsswrapper.js") != -1

Execute (tss_command customizable with node_cmd):
  let g:tscompletejob_node_cmd = "custom_node"
  let cmds = tscompletejob#tss_command()
  AssertEqual 2, len(cmds)
  AssertEqual "custom_node", cmds[0]

Execute (tss_command customizable with custom_tsserverlibrary):
  let g:tscompletejob_custom_tsserverlibrary = "custom_tssserverlib.js"
  let cmds = tscompletejob#tss_command()
  AssertEqual 3, len(cmds)
  AssertEqual "custom_tssserverlib.js", cmds[2]

Execute (status returns 'run' after send command):
  AssertEqual "not started", tscompletejob#status()
  call tscompletejob#complete(0, "")
  AssertEqual "run", tscompletejob#status()

Execute (can restart client after run):
  AssertEqual "not started", tscompletejob#status()
  call tscompletejob#complete(0, "")
  call tscompletejob#restart()
  AssertEqual "not started", tscompletejob#status()

Execute (complete findstart returns correct values):
  exec "edit " . sample1
  call cursor(27,3)
  normal a
  let pos = tscompletejob#complete(1,"")
  AssertEqual 3, pos
  let completions = tscompletejob#complete(0, "m")
  AssertEqual type([]), type(completions)
  AssertEqual 3, len(completions)

Execute (goto difinition can move to correct pos):
  exec "edit " . sample1
  call cursor(24,13)
  let id = tscompletejob#goto_definition()
  while !tscompletejob#is_request_done(id)
    sleep 50m
  endwhile
  let line = line(".")
  let col = col(".")
  AssertEqual 6, line
  AssertEqual 7, col

Execute (tagstack works correctly):
  let g:tscompletejob_enable_tagstack = 1
  exec "edit " . sample1
  call cursor(32, 1)
  let id = tscompletejob#goto_definition()
  while !tscompletejob#is_request_done(id)
    sleep 50m
  endwhile
  call cursor(3, 5)
  let id = tscompletejob#goto_definition()
  while !tscompletejob#is_request_done(id)
    sleep 50m
  endwhile
  let tags = tscompletejob#get_tagstack()
  AssertEqual 4, len(tags)
  AssertEqual "mod.ts", expand("%:t")

  call tscompletejob#goto_prev()
  AssertEqual "mod.ts", expand("%:t")
  AssertEqual 3, line(".")
  AssertEqual 5, col(".")

  call tscompletejob#goto_prev()
  AssertEqual "mod.ts", expand("%:t")
  AssertEqual 2, line(".")
  AssertEqual 17, col(".")

  call tscompletejob#goto_prev()
  AssertEqual "sample1.ts", expand("%:t")
  AssertEqual 32, line(".")
  AssertEqual 1, col(".")

  call tscompletejob#goto_next()
  AssertEqual "mod.ts", expand("%:t")
  AssertEqual 2, line(".")
  AssertEqual 17, col(".")

  call tscompletejob#goto_next()
  AssertEqual "mod.ts", expand("%:t")
  AssertEqual 3, line(".")
  AssertEqual 5, col(".")

Execute (signature_help can returns correct signatures):
  exec "edit " . sample1
  call cursor(29, 11)
  let sigs = tscompletejob#get_signature_help()
  AssertEqual 2, len(sigs)

Execute (qfixlist can returns corrent errors):
  exec "edit " . errors_ts
  let qflist = tscompletejob#get_qfixlist()
  AssertEqual 3, len(qflist)

Execute (rename can edit correctly):
  exec "edit " . rename_ts
  call cursor(1, 5)
  call tscompletejob#rename(1,1,"c")
  AssertEqual "let c: number = 1;", getline(1)
  AssertEqual "let b = c.toExponential();", getline(3)
  normal u

Execute (format can edit correctly):
  exec "edit " . format_ts
  %call tscompletejob#format()
  AssertEqual "let a: number = 1",               getline(1)

  AssertEqual "let obj = {",                     getline(3)
  AssertEqual "    a: 1, b: 2, c: 4,",           getline(4)
  AssertEqual "};",                              getline(5)

  AssertEqual "let v = null;",                   getline(6)
  AssertEqual "function a(x: number) {",         getline(8)
  AssertEqual "    console.log(x + 1 + 2 + 3);", getline(9)
  AssertEqual "}",                               getline(10)
  normal u

Execute (reference can returns correct list):
  exec "edit " . sample1
  call cursor(6,7)
  let id = tscompletejob#references()
  while !tscompletejob#is_request_done(id)
    sleep 50m
  endwhile
  let refs = getloclist(winnr())
  AssertEqual 3, len(refs)

Execute (complete with async callback works correctly):
   exec "edit " . sample1
   call cursor(27,3)
   normal a

   function! Assert()
     let s:response = []
     let s:success = 0
     let s:request_id = 0
     let s:done = 0
     function! TestCallback(request_id, success, response)
       let s:success = a:success
       let s:response = a:response
       let s:request_id = a:request_id
       let s:done = 1
     endfunction
     call tscompletejob#complete_with_handler(0, "m", {
       \ "callback": function('TestCallback'),
       \ "request_id" : 100,
       \})

     while !s:done
       sleep 50m
     endwhile

     " vars like 's:*' can't access in AssertEqual ??
     let success = s:success
     let response = s:response
     let request_id = s:request_id
     AssertEqual v:true, success
     AssertEqual 100, request_id
     AssertEqual type([]), type(response)
     AssertEqual 3, len(response)
   endfunction
   call Assert()

Execute (codefix can be applied correctly):
  exec "edit " . codefix_ts
  call cursor(6, 7)
  call tscompletejob#codefix(1)

  AssertEqual "abstract class Greeter {",                             getline(2)
  AssertEqual "    abstract greet(): String;",                        getline(3)
  AssertEqual "}",                                                    getline(4)

  AssertEqual "class Person extends Greeter {",                       getline(6)
  AssertEqual "    greet(): String {",                                getline(7)
  AssertEqual "        throw new Error('Method not implemented.');",  getline(8)
  AssertEqual "    }",                                                getline(9)


  AssertEqual "}",                                                    getline(12)
  normal u


Execute (quickinfo can returns correct infomation):
  exec "edit " . sample1
  call cursor(27, 1)
  execute "redir => s:messages"
  let id = tscompletejob#quickinfo()
  while !tscompletejob#is_request_done(id)
    sleep 10m
  endwhile
  redir END
  let info = get(split(s:messages,"\n"),-1, "")
  AssertEqual "let d: D", info
